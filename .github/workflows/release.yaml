name: Releasing Packages

on:
  workflow_dispatch:
    inputs:
      version:
        description: Version, e.g. v0.0.1
        required: true
  push:
    tags:
      - 'v*.*.*'
    branches:
      - release/v*.*.*

jobs:
  cuda-docker-images:
    runs-on: [self-hosted, gpu]
    steps:
      - name: Clone Repository (Latest Ref)
        uses: actions/checkout@v3
        if: github.event.inputs.version == ''
      - name: Clone Repository (Custom Ref)
        uses: actions/checkout@v2
        if: github.event.inputs.version != ''
        with:
          ref: ${{ github.event.inputs.version }}
      - name: Fetch submodules
        run: git submodule update --init --recursive
      - name: Set env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/*}" >> $GITHUB_ENV
        if: github.event.inputs.version == ''
      - name: Set env (Custom ref)
        run: echo "RELEASE_VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
        if: github.event.inputs.version != ''
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - name: Build cuda builder image
        run: docker buildx build --build-arg DEVEL_TAG=latest --push -t adaflow/adaflow-builder-cuda:${RELEASE_VERSION} -f ./docker/adaflow-builder-cuda.dockerfile .
      - name: Build cuda runtime image
        run: docker buildx build --build-arg DEVEL_TAG=${RELEASE_VERSION} --push -t adaflow/adaflow-runtime-cuda:${RELEASE_VERSION} -f ./docker/adaflow-runtime-cuda.dockerfile .

  cpu-only-docker-images:
    runs-on: ubuntu-latest
    steps:
      - name: Clone Repository (Latest Ref)
        uses: actions/checkout@v3
        if: github.event.inputs.version == ''
      - name: Clone Repository (Custom Ref)
        uses: actions/checkout@v2
        if: github.event.inputs.version != ''
        with:
          ref: ${{ github.event.inputs.version }}
      - name: Fetch submodules
        run: git submodule update --init --recursive
      - name: Set env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/*}" >> $GITHUB_ENV
        if: github.event.inputs.version == ''
      - name: set env (Custom ref)
        run: echo "RELEASE_VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
        if: github.event.inputs.version != ''
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - name: Build adaflow-builder-cpu
        run: docker buildx build --build-arg DEVEL_TAG=$(arch)-latest --push -t adaflow/adaflow-builder-cpu:$(arch)-${RELEASE_VERSION} -f ./docker/adaflow-builder-cpu.dockerfile .
      - name: Build adaflow-runtime-cpu
        run: docker buildx build --build-arg DEVEL_TAG=$(arch)-${RELEASE_VERSION} --push -t adaflow/adaflow-runtime-cpu:$(arch)-${RELEASE_VERSION} -f ./docker/adaflow-runtime-cpu.dockerfile .

  python-wheel:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
      - name: Clone Repository (Latest Ref)
        uses: actions/checkout@v3
        if: github.event.inputs.version == ''
      - name: Clone Repository (Custom Ref)
        uses: actions/checkout@v2
        if: github.event.inputs.version != ''
        with:
          ref: ${{ github.event.inputs.version }}
      - name: Fetch submodules
        run: git submodule update --init --recursive
      - name: Set env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/*}" >> $GITHUB_ENV
        if: github.event.inputs.version == ''
      - name: set env (Custom ref)
        run: echo "RELEASE_VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
        if: github.event.inputs.version != ''
      - name: Install Python deps
        run: python -m pip install build setuptools --user
      - name: Run python build
        run: cd modules/adaflow-python && python -m build .
      - name: Publish distribution ðŸ“¦ to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages-dir: modules/adaflow-python/dist

